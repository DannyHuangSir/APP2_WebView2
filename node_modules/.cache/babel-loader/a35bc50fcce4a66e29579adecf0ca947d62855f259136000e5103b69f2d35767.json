{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{callAPI}from'utilities/axios';/**\r\n * 取得需要使用者輸入驗證的項目。\r\n * @param {*} autoCode 要求進行的驗證模式的代碼。\r\n * @returns 驗證項目旗標。(0x01:生物辨識或圖形鎖, 0x02:網銀密碼)\r\n */export var getTransactionAuthMode=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(autoCode){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return callAPI('/api/transactionAuth/v1/getAuthMode',autoCode);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}}},_callee);}));return function getTransactionAuthMode(_x){return _ref.apply(this,arguments);};}();/**\r\n * 單元功能要求 建立交易授權驗證，必要時會發送OTP驗證碼簡訊，並依 otpMode 決定發送閘道及手機門號。\r\n * @param {{\r\n *   funcCode: '要求發送OTP的單元功能；這個欄位由 APP 從 FunctionController 取得。'\r\n *   authCode: '要求進行的驗證模式的代碼'\r\n *   mobile: '簡訊識別碼發送的手機門號；當綁定或變更門號時，因為需要確認手機號碼的正確性，所以要再驗OTP'\r\n * }} request\r\n * @returns {Promise<{\r\n *   key: '本次要求驗證的金鑰，用來檢核使用者輸入'\r\n *   otpSmsId: 'OTP簡訊中的識別碼。'\r\n *   otpMobile: '簡訊識別碼發送的手機門號。'\r\n * }>}\r\n */export var createTransactionAuth=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return callAPI('/api/transactionAuth/v1/create',request);case 2:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function createTransactionAuth(_x2){return _ref2.apply(this,arguments);};}();/**\r\n * 依指定的驗證模式，對使用者輸入的資料進行驗證。\r\n * @param {*} request {\r\n *   authKey: 本次要求驗證的金鑰，需透過 createTransactionAuth 取得。\r\n *   funcCode: 要求發送OTP的單元功能。 這個欄位由 APP 從 FunctionController 取得。\r\n *   auth2FA: 可以讓Server端確認真的通過驗證的資料，例：全景的驗證資料\r\n *   netbankPwd: 使用者輸入的「網銀密碼」，已做過 E2EE 加密。\r\n *   otpCode: 使用者輸入的「驗證碼」。\r\n * }\r\n * @returns {\r\n *   result: 驗證結果(true/false)\r\n *   message: 驗證失敗狀況描述。\r\n * }\r\n */export var transactionAuthVerify=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(request){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return callAPI('/api/transactionAuth/v1/verify',request);case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function transactionAuthVerify(_x3){return _ref3.apply(this,arguments);};}();","map":{"version":3,"names":["callAPI","getTransactionAuthMode","autoCode","response","data","createTransactionAuth","request","transactionAuthVerify"],"sources":["C:/Users/allen/git/app2-webview/src/components/PasswordDrawer/api.js"],"sourcesContent":["import { callAPI } from 'utilities/axios';\r\n\r\n/**\r\n * 取得需要使用者輸入驗證的項目。\r\n * @param {*} autoCode 要求進行的驗證模式的代碼。\r\n * @returns 驗證項目旗標。(0x01:生物辨識或圖形鎖, 0x02:網銀密碼)\r\n */\r\nexport const getTransactionAuthMode = async (autoCode) => {\r\n  const response = await callAPI('/api/transactionAuth/v1/getAuthMode', autoCode);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 單元功能要求 建立交易授權驗證，必要時會發送OTP驗證碼簡訊，並依 otpMode 決定發送閘道及手機門號。\r\n * @param {{\r\n *   funcCode: '要求發送OTP的單元功能；這個欄位由 APP 從 FunctionController 取得。'\r\n *   authCode: '要求進行的驗證模式的代碼'\r\n *   mobile: '簡訊識別碼發送的手機門號；當綁定或變更門號時，因為需要確認手機號碼的正確性，所以要再驗OTP'\r\n * }} request\r\n * @returns {Promise<{\r\n *   key: '本次要求驗證的金鑰，用來檢核使用者輸入'\r\n *   otpSmsId: 'OTP簡訊中的識別碼。'\r\n *   otpMobile: '簡訊識別碼發送的手機門號。'\r\n * }>}\r\n */\r\nexport const createTransactionAuth = async (request) => {\r\n  const response = await callAPI('/api/transactionAuth/v1/create', request);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 依指定的驗證模式，對使用者輸入的資料進行驗證。\r\n * @param {*} request {\r\n *   authKey: 本次要求驗證的金鑰，需透過 createTransactionAuth 取得。\r\n *   funcCode: 要求發送OTP的單元功能。 這個欄位由 APP 從 FunctionController 取得。\r\n *   auth2FA: 可以讓Server端確認真的通過驗證的資料，例：全景的驗證資料\r\n *   netbankPwd: 使用者輸入的「網銀密碼」，已做過 E2EE 加密。\r\n *   otpCode: 使用者輸入的「驗證碼」。\r\n * }\r\n * @returns {\r\n *   result: 驗證結果(true/false)\r\n *   message: 驗證失敗狀況描述。\r\n * }\r\n */\r\nexport const transactionAuthVerify = async (request) => {\r\n  const response = await callAPI('/api/transactionAuth/v1/verify', request);\r\n  return response.data;\r\n};\r\n"],"mappings":"0PAAA,OAASA,OAAO,KAAQ,iBAAiB,CAEzC;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,uBAAsB,4FAAG,iBAAOC,QAAQ,uJAC5BF,QAAO,CAAC,qCAAqC,CAAEE,QAAQ,CAAC,QAAzEC,QAAQ,+CACPA,QAAQ,CAACC,IAAI,wDACrB,kBAHYH,uBAAsB,4CAGlC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMI,sBAAqB,6FAAG,kBAAOC,OAAO,4JAC1BN,QAAO,CAAC,gCAAgC,CAAEM,OAAO,CAAC,QAAnEH,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYC,sBAAqB,8CAGjC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,sBAAqB,6FAAG,kBAAOD,OAAO,4JAC1BN,QAAO,CAAC,gCAAgC,CAAEM,OAAO,CAAC,QAAnEH,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYG,sBAAqB,8CAGjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}