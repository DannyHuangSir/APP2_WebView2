{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import uuid from'react-uuid';import CipherUtil from'utilities/CipherUtil';import{userRequest,callAPI}from'utilities/axios';import{getOsType}from'utilities/AppScriptProxy';// 裝置開啟時去呼叫\nvar handshake=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _CipherUtil$generateR,privateKey,publicKey,aesKey,iv,message,getPKeyRs,preloadRs,jwtToken;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:localStorage.clear();sessionStorage.clear();sessionStorage.setItem('webMode',true);_CipherUtil$generateR=CipherUtil.generateRSA(),privateKey=_CipherUtil$generateR.privateKey,publicKey=_CipherUtil$generateR.publicKey;aesKey=CipherUtil.generateKey(256);// 使用JWT模式時，Request/Response Payload 的加解密金鑰，採用 AES256。\niv=CipherUtil.generateKey(128);// IV固定為 128bits\nsessionStorage.setItem('privateKey',privateKey);sessionStorage.setItem('publicKey',publicKey);sessionStorage.setItem('aesKey',aesKey);sessionStorage.setItem('iv',iv);message={txnId:\"WVIEW_\".concat(uuid()),// deviceId: null,\ndeviceId:uuid(),// NOTE 用不用的 deviceId 可以進行「已在不同手機做過綁定」的情境。\nosType:getOsType()-1,osVersion:'16.1.1',appVersion:'1.0.26',encK:aesKey,iv:iv,rsaPubK:publicKey};if(!message.deviceId)alert('請在 proto/Login/HandShake 填入 deviceId');_context.next=14;return userRequest('get','/auth/v1/getPublicKey');case 14:getPKeyRs=_context.sent;sessionStorage.setItem('serverPKey',getPKeyRs.data.data);//\n// 精誠隨想的 Handshak\n//\n_context.next=18;return callAPI('/smJwe/v1/preload',message);case 18:preloadRs=_context.sent;if(preloadRs.code==='0000'){jwtToken=preloadRs.data.jwtToken;sessionStorage.setItem('jwtToken',jwtToken);}else{alert(\"Hand shake fail! \".concat(preloadRs.message));}case 20:case\"end\":return _context.stop();}}},_callee);}));return function handshake(){return _ref.apply(this,arguments);};}();export default handshake;","map":{"version":3,"names":["uuid","CipherUtil","userRequest","callAPI","getOsType","handshake","localStorage","clear","sessionStorage","setItem","generateRSA","privateKey","publicKey","aesKey","generateKey","iv","message","txnId","deviceId","osType","osVersion","appVersion","encK","rsaPubK","alert","getPKeyRs","data","preloadRs","code","jwtToken"],"sources":["C:/Users/allen/git/app2-webview/src/proto/Login/HandShake.js"],"sourcesContent":["import uuid from 'react-uuid';\r\nimport CipherUtil from 'utilities/CipherUtil';\r\nimport { userRequest, callAPI } from 'utilities/axios';\r\nimport { getOsType } from 'utilities/AppScriptProxy';\r\n\r\n// 裝置開啟時去呼叫\r\nconst handshake = async () => {\r\n  localStorage.clear();\r\n  sessionStorage.clear();\r\n  sessionStorage.setItem('webMode', true);\r\n\r\n  const { privateKey, publicKey } = CipherUtil.generateRSA();\r\n  const aesKey = CipherUtil.generateKey(256); // 使用JWT模式時，Request/Response Payload 的加解密金鑰，採用 AES256。\r\n  const iv = CipherUtil.generateKey(128); // IV固定為 128bits\r\n\r\n  sessionStorage.setItem('privateKey', privateKey);\r\n  sessionStorage.setItem('publicKey', publicKey);\r\n  sessionStorage.setItem('aesKey', aesKey);\r\n  sessionStorage.setItem('iv', iv);\r\n\r\n  const message = {\r\n    txnId: `WVIEW_${uuid()}`,\r\n    // deviceId: null,\r\n    deviceId: uuid(),\r\n    // NOTE 用不用的 deviceId 可以進行「已在不同手機做過綁定」的情境。\r\n    osType: getOsType() - 1,\r\n    osVersion: '16.1.1',\r\n    appVersion: '1.0.26',\r\n    encK: aesKey,\r\n    iv,\r\n    rsaPubK: publicKey,\r\n  };\r\n  if (!message.deviceId) alert('請在 proto/Login/HandShake 填入 deviceId');\r\n  const getPKeyRs = await userRequest('get', '/auth/v1/getPublicKey');\r\n  sessionStorage.setItem('serverPKey', getPKeyRs.data.data);\r\n\r\n  //\r\n  // 精誠隨想的 Handshak\r\n  //\r\n  const preloadRs = await callAPI('/smJwe/v1/preload', message);\r\n  if (preloadRs.code === '0000') {\r\n    const { jwtToken } = preloadRs.data;\r\n    sessionStorage.setItem('jwtToken', jwtToken);\r\n  } else {\r\n    alert(`Hand shake fail! ${preloadRs.message}`);\r\n  }\r\n};\r\n\r\nexport default handshake;\r\n"],"mappings":"0PAAA,MAAOA,KAAI,KAAM,YAAY,CAC7B,MAAOC,WAAU,KAAM,sBAAsB,CAC7C,OAASC,WAAW,CAAEC,OAAO,KAAQ,iBAAiB,CACtD,OAASC,SAAS,KAAQ,0BAA0B,CAEpD;AACA,GAAMC,UAAS,4FAAG,mOAChBC,YAAY,CAACC,KAAK,EAAE,CACpBC,cAAc,CAACD,KAAK,EAAE,CACtBC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAE,IAAI,CAAC,CAAC,sBAENR,UAAU,CAACS,WAAW,EAAE,CAAlDC,UAAU,uBAAVA,UAAU,CAAEC,SAAS,uBAATA,SAAS,CACvBC,MAAM,CAAGZ,UAAU,CAACa,WAAW,CAAC,GAAG,CAAC,CAAE;AACtCC,EAAE,CAAGd,UAAU,CAACa,WAAW,CAAC,GAAG,CAAC,CAAE;AAExCN,cAAc,CAACC,OAAO,CAAC,YAAY,CAAEE,UAAU,CAAC,CAChDH,cAAc,CAACC,OAAO,CAAC,WAAW,CAAEG,SAAS,CAAC,CAC9CJ,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAEI,MAAM,CAAC,CACxCL,cAAc,CAACC,OAAO,CAAC,IAAI,CAAEM,EAAE,CAAC,CAE1BC,OAAO,CAAG,CACdC,KAAK,iBAAWjB,IAAI,EAAE,CAAE,CACxB;AACAkB,QAAQ,CAAElB,IAAI,EAAE,CAChB;AACAmB,MAAM,CAAEf,SAAS,EAAE,CAAG,CAAC,CACvBgB,SAAS,CAAE,QAAQ,CACnBC,UAAU,CAAE,QAAQ,CACpBC,IAAI,CAAET,MAAM,CACZE,EAAE,CAAFA,EAAE,CACFQ,OAAO,CAAEX,SACX,CAAC,CACD,GAAI,CAACI,OAAO,CAACE,QAAQ,CAAEM,KAAK,CAAC,sCAAsC,CAAC,CAAC,uBAC7CtB,YAAW,CAAC,KAAK,CAAE,uBAAuB,CAAC,SAA7DuB,SAAS,eACfjB,cAAc,CAACC,OAAO,CAAC,YAAY,CAAEgB,SAAS,CAACC,IAAI,CAACA,IAAI,CAAC,CAEzD;AACA;AACA;AAAA,uBACwBvB,QAAO,CAAC,mBAAmB,CAAEa,OAAO,CAAC,SAAvDW,SAAS,eACf,GAAIA,SAAS,CAACC,IAAI,GAAK,MAAM,CAAE,CACrBC,QAAQ,CAAKF,SAAS,CAACD,IAAI,CAA3BG,QAAQ,CAChBrB,cAAc,CAACC,OAAO,CAAC,UAAU,CAAEoB,QAAQ,CAAC,CAC9C,CAAC,IAAM,CACLL,KAAK,4BAAqBG,SAAS,CAACX,OAAO,EAAG,CAChD,CAAC,uDACF,kBAxCKX,UAAS,0CAwCd,CAED,cAAeA,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}