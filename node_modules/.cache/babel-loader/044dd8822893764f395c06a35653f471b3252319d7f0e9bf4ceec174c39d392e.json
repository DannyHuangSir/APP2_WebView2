{"ast":null,"code":"import _objectSpread from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{setBanks,setBranches,setAccounts}from'stores/reducers/CacheReducer';import store from'stores/store';import{callAPI}from'utilities/axios';/**\r\n * 查詢銀行代碼\r\n * @returns {Promise<[{\r\n *  bankNo: 銀行代碼,\r\n *  bankName: 銀行名稱\r\n * }]>} 銀行代碼清單。\r\n */export var getBankCode=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _store$getState;var _store$getState$Cache,banks,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_store$getState$Cache=(_store$getState=store.getState())===null||_store$getState===void 0?void 0:_store$getState.CacheReducer,banks=_store$getState$Cache.banks;if(banks){_context.next=7;break;}_context.next=4;return callAPI('/api/transfer/queryBank');case 4:response=_context.sent;banks=response.data;store.dispatch(setBanks(banks));case 7:return _context.abrupt(\"return\",banks);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getBankCode(){return _ref.apply(this,arguments);};}();/**\r\n * 取得所有分行清單。\r\n * @returns {Promise<[{\r\n     branchNo: 分行代碼,\r\n     branchCode: 分行轉帳代碼,\r\n     branchName: 分行名稱,\r\n   }]>} 分行清單。\r\n */export var getBranchCode=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var _store$getState2;var _store$getState$Cache2,branches,response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_store$getState$Cache2=(_store$getState2=store.getState())===null||_store$getState2===void 0?void 0:_store$getState2.CacheReducer,branches=_store$getState$Cache2.branches;if(branches){_context2.next=7;break;}_context2.next=4;return callAPI('/api/v1/getAllBranches');case 4:response=_context2.sent;branches=response.data;store.dispatch(setBranches(branches));case 7:return _context2.abrupt(\"return\",branches);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function getBranchCode(){return _ref2.apply(this,arguments);};}();/**\r\n * 取得帳號基本資料，不含跨轉優惠次數，且餘額「非即時」。\r\n * @return {Promise<[{\r\n *   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n *   accountNo: 帳號,\r\n *   branchName: 分行名稱,\r\n *   balance: 帳戶餘額(, // NOTE 餘額「非即時」資訊\r\n *   currency: 幣別代碼,\r\n *   alias: 帳戶名稱，若有暱稱則會優先用暱稱,\r\n *   dgType: 帳戶類別('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\r\n *   transable: 已設約轉 或 同ID互轉(true/false)\r\n * }]>} 帳號基本資料。\r\n */var loadAccountsList=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var Promise1,Promise2;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// API /api/deposit/v1/getAccounts Response [{\n//   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\n//   account: 帳號,\n//   name: 帳戶名稱，若有暱稱則會優先用暱稱,\n//   dgType: 帳戶類別('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\n//   transable: 已設約轉 或 同ID互轉(true/false)\n//   details: [{ // 外幣多幣別時有多筆\n//        balance: 帳戶餘額(, // NOTE 餘額「非即時」資訊\n//        currency: 幣別代碼,\n//   }]\n// }]\nPromise1=callAPI('/api/deposit/v1/getAccounts','MSFC');Promise2=getBranchCode();_context3.next=4;return Promise.allSettled([Promise1,Promise2]).then(function(result){var accounts=result[0].value.data;var branches=result[1].value;return accounts.map(function(acct){var _branches$find$branch,_branches$find;var branchId=acct.account.substring(0,3);return{acctType:acct.acctType,accountNo:acct.account,branchName:(_branches$find$branch=(_branches$find=branches.find(function(b){return b.branchNo===branchId;}))===null||_branches$find===void 0?void 0:_branches$find.branchName)!==null&&_branches$find$branch!==void 0?_branches$find$branch:branchId,details:acct.details,alias:acct.name,dgType:acct.dgType,transable:acct.transable};});});case 4:return _context3.abrupt(\"return\",_context3.sent);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function loadAccountsList(){return _ref3.apply(this,arguments);};}();/**\r\n * 取得帳號基本資料，不含跨轉優惠次數，且餘額「非即時」。\r\n * @param {String} acctTypes 帳戶類型 M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n * @return {Promise<[{\r\n *   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶,\r\n *   accountNo: 帳號,\r\n *   branchName: 分行名稱,\r\n *   balance: 帳戶餘額, // NOTE 餘額「非即時」資訊\r\n *   currency: 幣別代碼,\r\n *   alias: 帳戶名稱 // 若有暱稱則會優先用暱稱,\r\n *   dgType: 帳戶類別 // ('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\r\n *   transable: 已設約轉 或 同ID互轉(true/false)\r\n * }]>} 帳號基本資料。\r\n */export var getAccountsList=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(acctTypes,onDataLoaded){var _store$getState3;var _store$getState$Cache3,accounts,result;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_store$getState$Cache3=(_store$getState3=store.getState())===null||_store$getState3===void 0?void 0:_store$getState3.CacheReducer,accounts=_store$getState$Cache3.accounts;if(accounts){_context4.next=6;break;}_context4.next=4;return loadAccountsList();case 4:accounts=_context4.sent;store.dispatch(setAccounts(accounts));// 保存所有的帳號資料。\ncase 6:result=accounts.filter(function(account){return acctTypes.indexOf(account.acctType)>=0;})// NOTE 外幣帳號的架構跟台幣不一樣。\n// 要把一個帳戶、多個幣別 展開成 多個帳戶 的型式呈現。\n.map(function(account){return!account.details// 若是從 sessionStorage 取出的值，就沒有 details，所以直接傳回即可。\n?account:account.details.map(function(detail){var acct=_objectSpread(_objectSpread({},account),detail);delete acct.details;return acct;});}).flat();if(onDataLoaded)onDataLoaded(result);case 8:case\"end\":return _context4.stop();}}},_callee4);}));return function getAccountsList(_x,_x2){return _ref4.apply(this,arguments);};}();/**\r\n * 取得取得免費跨提/跨轉次數、數存優惠利率及資訊\r\n * @param {String} accountNo 存款帳號\r\n * @param {Function} foreUpdate\r\n * @param {Boolean} foreUpdate\r\n * @returns {Promise<{\r\n *   freeWithdraw: 免費跨提總次數\r\n *   freeWithdrawRemain: 免費跨提剩餘次數\r\n *   freeTransfer: 免費跨轉總次數\r\n *   freeTransferRemain: 免費跨轉剩餘次數\r\n *   bonusQuota: 優惠利率額度\r\n *   bonusRate: 優惠利率\r\n *   interest: 累積利息\r\n * }>} 優惠資訊\r\n */export var getAccountBonus=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accountNo,onDataLoaded,foreUpdate){var _store$getState4;var _store$getState$Cache4,accounts,bonus,index,_bonus,response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_store$getState$Cache4=(_store$getState4=store.getState())===null||_store$getState4===void 0?void 0:_store$getState4.CacheReducer,accounts=_store$getState$Cache4.accounts;if(accounts){_context5.next=6;break;}_context5.next=4;return loadAccountsList();case 4:accounts=_context5.sent;store.dispatch(setAccounts(accounts));// 保存所有的帳號資料。\ncase 6:index=accounts.findIndex(function(account){return account.accountNo===accountNo;});if(!(index>=0)){_context5.next=18;break;}bonus=accounts[index].bonus;if(!((!bonus||foreUpdate)&&!((_bonus=bonus)!==null&&_bonus!==void 0&&_bonus.isLoading))){_context5.next=18;break;}accounts[index].bonus={isLoading:true};store.dispatch(setAccounts(accounts));_context5.next=14;return callAPI('/api/depositPlus/v1/getBonusInfo',accountNo);case 14:response=_context5.sent;bonus=response.data;accounts[index].bonus=bonus;store.dispatch(setAccounts(accounts));case 18:if(onDataLoaded)onDataLoaded(bonus);case 19:case\"end\":return _context5.stop();}}},_callee5);}));return function getAccountBonus(_x3,_x4,_x5){return _ref5.apply(this,arguments);};}();/**\r\n * 將更新後的存款帳號物件存入 Redux\r\n * @param {*} newAccount\r\n */export var updateAccount=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(newAccount){var _store$getState5;var _store$getState$Cache5,accounts,index;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_store$getState$Cache5=(_store$getState5=store.getState())===null||_store$getState5===void 0?void 0:_store$getState5.CacheReducer,accounts=_store$getState$Cache5.accounts;if(accounts){_context6.next=6;break;}_context6.next=4;return loadAccountsList();case 4:accounts=_context6.sent;store.dispatch(setAccounts(accounts));// 保存所有的帳號資料。\ncase 6:index=accounts.findIndex(function(account){return account.accountNo===newAccount.accountNo;});if(index>=0){accounts[index]=newAccount;store.dispatch(setAccounts(accounts));}case 8:case\"end\":return _context6.stop();}}},_callee6);}));return function updateAccount(_x6){return _ref6.apply(this,arguments);};}();","map":{"version":3,"names":["setBanks","setBranches","setAccounts","store","callAPI","getBankCode","getState","CacheReducer","banks","response","data","dispatch","getBranchCode","branches","loadAccountsList","Promise1","Promise2","Promise","allSettled","then","result","accounts","value","map","acct","branchId","account","substring","acctType","accountNo","branchName","find","b","branchNo","details","alias","name","dgType","transable","getAccountsList","acctTypes","onDataLoaded","filter","indexOf","detail","flat","getAccountBonus","foreUpdate","index","findIndex","bonus","isLoading","updateAccount","newAccount"],"sources":["C:/Users/allen/git/app2-webview/src/utilities/CacheData.js"],"sourcesContent":["import { setBanks, setBranches, setAccounts } from 'stores/reducers/CacheReducer';\r\nimport store from 'stores/store';\r\nimport { callAPI } from 'utilities/axios';\r\n\r\n/**\r\n * 查詢銀行代碼\r\n * @returns {Promise<[{\r\n *  bankNo: 銀行代碼,\r\n *  bankName: 銀行名稱\r\n * }]>} 銀行代碼清單。\r\n */\r\nexport const getBankCode = async () => {\r\n  let {banks} = store.getState()?.CacheReducer;\r\n  if (!banks) {\r\n    const response = await callAPI('/api/transfer/queryBank');\r\n    banks = response.data;\r\n    store.dispatch(setBanks(banks));\r\n  }\r\n  return banks;\r\n};\r\n\r\n/**\r\n * 取得所有分行清單。\r\n * @returns {Promise<[{\r\n     branchNo: 分行代碼,\r\n     branchCode: 分行轉帳代碼,\r\n     branchName: 分行名稱,\r\n   }]>} 分行清單。\r\n */\r\nexport const getBranchCode = async () => {\r\n  let {branches} = store.getState()?.CacheReducer;\r\n  if (!branches) {\r\n    const response = await callAPI('/api/v1/getAllBranches');\r\n    branches = response.data;\r\n    store.dispatch(setBranches(branches));\r\n  }\r\n  return branches;\r\n};\r\n\r\n/**\r\n * 取得帳號基本資料，不含跨轉優惠次數，且餘額「非即時」。\r\n * @return {Promise<[{\r\n *   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n *   accountNo: 帳號,\r\n *   branchName: 分行名稱,\r\n *   balance: 帳戶餘額(, // NOTE 餘額「非即時」資訊\r\n *   currency: 幣別代碼,\r\n *   alias: 帳戶名稱，若有暱稱則會優先用暱稱,\r\n *   dgType: 帳戶類別('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\r\n *   transable: 已設約轉 或 同ID互轉(true/false)\r\n * }]>} 帳號基本資料。\r\n */\r\nconst loadAccountsList = async () => {\r\n  // API /api/deposit/v1/getAccounts Response [{\r\n  //   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n  //   account: 帳號,\r\n  //   name: 帳戶名稱，若有暱稱則會優先用暱稱,\r\n  //   dgType: 帳戶類別('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\r\n  //   transable: 已設約轉 或 同ID互轉(true/false)\r\n  //   details: [{ // 外幣多幣別時有多筆\r\n  //        balance: 帳戶餘額(, // NOTE 餘額「非即時」資訊\r\n  //        currency: 幣別代碼,\r\n  //   }]\r\n  // }]\r\n  const Promise1 = callAPI('/api/deposit/v1/getAccounts', 'MSFC');\r\n  const Promise2 = getBranchCode();\r\n  return await Promise.allSettled([Promise1, Promise2]).then((result) => {\r\n    const accounts = result[0].value.data;\r\n    const branches = result[1].value;\r\n\r\n    return accounts.map((acct) => {\r\n      const branchId = acct.account.substring(0, 3);\r\n      return {\r\n        acctType: acct.acctType,\r\n        accountNo: acct.account,\r\n        branchName: branches.find((b) => b.branchNo === branchId)?.branchName ?? branchId,\r\n        details: acct.details,\r\n        alias: acct.name,\r\n        dgType: acct.dgType,\r\n        transable: acct.transable,\r\n      };\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 取得帳號基本資料，不含跨轉優惠次數，且餘額「非即時」。\r\n * @param {String} acctTypes 帳戶類型 M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n * @return {Promise<[{\r\n *   acctType: 帳戶類型 // M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶,\r\n *   accountNo: 帳號,\r\n *   branchName: 分行名稱,\r\n *   balance: 帳戶餘額, // NOTE 餘額「非即時」資訊\r\n *   currency: 幣別代碼,\r\n *   alias: 帳戶名稱 // 若有暱稱則會優先用暱稱,\r\n *   dgType: 帳戶類別 // ('  '.非數存帳號, '11'.臨櫃數存昇級一般, '12'.一之二類, ' 2'.二類, '32'.三之二類)\r\n *   transable: 已設約轉 或 同ID互轉(true/false)\r\n * }]>} 帳號基本資料。\r\n */\r\nexport const getAccountsList = async (acctTypes, onDataLoaded) => {\r\n  let {accounts} = store.getState()?.CacheReducer;\r\n  if (!accounts) {\r\n    accounts = await loadAccountsList();\r\n    store.dispatch(setAccounts(accounts)); // 保存所有的帳號資料。\r\n  }\r\n\r\n  const result = accounts.filter((account) => acctTypes.indexOf(account.acctType) >= 0)\r\n    // NOTE 外幣帳號的架構跟台幣不一樣。\r\n    // 要把一個帳戶、多個幣別 展開成 多個帳戶 的型式呈現。\r\n    .map((account) => (!account.details // 若是從 sessionStorage 取出的值，就沒有 details，所以直接傳回即可。\r\n      ? account\r\n      : account.details.map((detail) => {\r\n        const acct = { ...account, ...detail};\r\n        delete acct.details;\r\n        return acct;\r\n      })))\r\n    .flat();\r\n  if (onDataLoaded) onDataLoaded(result);\r\n};\r\n\r\n/**\r\n * 取得取得免費跨提/跨轉次數、數存優惠利率及資訊\r\n * @param {String} accountNo 存款帳號\r\n * @param {Function} foreUpdate\r\n * @param {Boolean} foreUpdate\r\n * @returns {Promise<{\r\n *   freeWithdraw: 免費跨提總次數\r\n *   freeWithdrawRemain: 免費跨提剩餘次數\r\n *   freeTransfer: 免費跨轉總次數\r\n *   freeTransferRemain: 免費跨轉剩餘次數\r\n *   bonusQuota: 優惠利率額度\r\n *   bonusRate: 優惠利率\r\n *   interest: 累積利息\r\n * }>} 優惠資訊\r\n */\r\nexport const getAccountBonus = async (accountNo, onDataLoaded, foreUpdate) => {\r\n  let {accounts} = store.getState()?.CacheReducer;\r\n  if (!accounts) {\r\n    accounts = await loadAccountsList();\r\n    store.dispatch(setAccounts(accounts)); // 保存所有的帳號資料。\r\n  }\r\n\r\n  let bonus;\r\n  const index = accounts.findIndex((account) => account.accountNo === accountNo);\r\n  if (index >= 0) {\r\n    bonus = accounts[index].bonus;\r\n    if ((!bonus || foreUpdate) && !bonus?.isLoading) {\r\n      accounts[index].bonus = { isLoading: true };\r\n      store.dispatch(setAccounts(accounts));\r\n\r\n      const response = await callAPI('/api/depositPlus/v1/getBonusInfo', accountNo);\r\n      bonus = response.data;\r\n\r\n      accounts[index].bonus = bonus;\r\n      store.dispatch(setAccounts(accounts));\r\n    }\r\n  }\r\n  if (onDataLoaded) onDataLoaded(bonus);\r\n};\r\n\r\n/**\r\n * 將更新後的存款帳號物件存入 Redux\r\n * @param {*} newAccount\r\n */\r\nexport const updateAccount = async (newAccount) => {\r\n  let {accounts} = store.getState()?.CacheReducer;\r\n  if (!accounts) {\r\n    accounts = await loadAccountsList();\r\n    store.dispatch(setAccounts(accounts)); // 保存所有的帳號資料。\r\n  }\r\n\r\n  const index = accounts.findIndex((account) => account.accountNo === newAccount.accountNo);\r\n  if (index >= 0) {\r\n    accounts[index] = newAccount;\r\n    store.dispatch(setAccounts(accounts));\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}