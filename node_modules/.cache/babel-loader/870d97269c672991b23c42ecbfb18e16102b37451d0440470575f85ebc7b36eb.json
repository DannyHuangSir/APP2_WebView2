{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{callAPI}from'utilities/axios';import mockTerms from'./terms';/**\r\n * 取得存款帳戶卡片所需的資訊\r\n * @param {*} acctType 帳戶類型 M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n * @returns 存款帳戶資訊。\r\n */export var getAccountSummary=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(acctTypes){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return callAPI('/api/deposit/v1/getAccountSummary',acctTypes);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data.map(function(acct){return{acctBranch:acct.branch,// 分行代碼\nacctName:acct.name,// 帳戶名稱或暱稱\nacctId:acct.account,// 帳號\nacctType:acct.type,// 帳號類別\nacctBalx:acct.balance,// 帳戶餘額\nccyCd:acct.currency// 幣別代碼\n};}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function getAccountSummary(_x){return _ref.apply(this,arguments);};}();/**\r\n * 取得當前所選帳號之交易明細\r\n * @param {*} request {\r\n    accountNo: 帳號, ex: 00100100063106,\r\n    custom: 文字檢索條件, ex: 退款.\r\n    startDate: 交易日期起日, ex: 20200101,\r\n    endDate: 交易日期迄日, ex: 20210731,\r\n    txnType: 摘要代碼: 1:跨轉、2:ATM、3:存款息、4:薪轉、5:付款儲存、6:自動扣繳, 可多筆,\r\n    month: 起始月份，預設為最接近月底的日期為起始索引, ex: 202104,\r\n    startIndex: 指定起始索引,\r\n    direct: 方向性.1:正向(新~舊)、2:反向(舊~新)、0:雙向方向性\r\n  }\r\n * @returns 帳戶往來明細清單\r\n    {\r\n        \"index\": 1,\r\n        \"bizDate\": \"20220425\",\r\n        \"txnDate\": \"20220425\",\r\n        \"txnTime\": 210156,\r\n        \"description\": \"現金\",\r\n        \"memo\": null,\r\n        \"targetMbrId\": null,\r\n        \"targetNickName\": null,\r\n        \"targetBank\": \"000\",\r\n        \"targetAcct\": null,\r\n        \"amount\": 36000,\r\n        \"balance\": 386000,\r\n        \"cdType\": \"d\",\r\n        \"currency\": \"TWD\"\r\n    }\r\n */export var getTransactionDetails=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return callAPI('/api/deposit/v1/getTransactions',request);case 2:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getTransactionDetails(_x2){return _ref2.apply(this,arguments);};}();/**\r\n * 取得目前用戶的存錢計劃清單\r\n * @returns {object}\r\n {\r\n    plans: [{ // 進行中的計劃數量\r\n      planId, // 計劃代碼（UUID 型式），可以用來取得圖片。 直接組合 URL/{planId}.jpg\r\n      progInfo: { // 存錢計劃適用方案(Program)資訊\r\n        code: 代碼，應跟優利的代碼一致。\r\n        type: 類型：0.基本方案, 1.行銷活動方案.\r\n        name: 名稱\r\n        rate: 計息利率，例: 0.6；僅供顯示用，不會拿來計息。\r\n        description: 詳細說明。\r\n      },\r\n      imageId, // Title圖片（預設代碼: 0,1~6），若是由用戶上傳的Base64影像資料，則在建立成功後再透過 updateDepositPlan 上傳\r\n      name, // 計劃名稱（最多七個字），若為 progCode=行銷活動方案 則為方案名稱。\r\n      startDate, // 計劃啟動時間，格式：yyyyMMdd\r\n      endDate, // 計劃結束時間，格式：yyyyMMdd\r\n      cycleMode, // 存入週期（1.每周、2.每月）\r\n      cycleTiming, // 存入時機；每周：0～6(周日～周六)、每月：1~28及月底(31)\r\n      amount, // 每期存入金額，格式：99999。\r\n      period, // 計劃存入期數\r\n      goalAmount: // 依 amount * 期數 計算出的計劃目標存款金額。\r\n      bindAccountNo, // 綁定的子帳戶（帳號、餘額）\r\n      currentBalance, // 目前子帳戶的存款餘額\r\n      isMaster, // 表示呈現在APP首頁的主要計劃，即進存錢計劃功能的預設開啟計劃。\r\n    }, ...],\r\n    subAccounts: [{ // 可用子帳戶清單及是否有餘額，已排除綁定其他用途的子帳戶\r\n      accountNo, // 子帳戶的帳號\r\n      balance, // 帳戶餘額\r\n    }, ...]\r\n    totalSubAccountCount, // 此用戶已擁有的子帳戶數量（不區分用途）\r\n */export var getDepositPlans=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return callAPI('/api/depositPlan/v1/getAllPlans');case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.data);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getDepositPlans(){return _ref3.apply(this,arguments);};}();/**\r\n * 取得存錢計劃適用方案(Program)資訊，已停用或不在有效期限內的方案不會列在清單中。\r\n * @returns {object}\r\n * @return [{\r\n *   code: 代碼，應跟優利的代碼一致。\r\n *   type: 類型：0.基本方案, 1.行銷活動方案.\r\n *   name: 名稱\r\n *   rate: 計息利率，例: 0.6；僅供顯示用，不會拿來計息。\r\n *   period: 期數，基本方案時為 0\r\n *   description: 詳細說明。\r\n *   amountRange: {\r\n *      week: { 存入週期（1.每周）時，的上下限金額。例：{ min: 100, max: 50000 }\r\n *        min: 0,\r\n *        max: 0\r\n *      }\r\n *      month: { 存入週期（2.每月）時，的上下限金額。例：{ min: 10000, max: 500000 }\r\n *        min: 0,\r\n *        max: 0\r\n *      }\r\n *   }\r\n * }, ...]\r\n */export var getDepositPlanProgram=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(){var response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return callAPI('/api/depositPlan/v1/getPrograms');case 2:response=_context4.sent;return _context4.abrupt(\"return\",response.data);case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function getDepositPlanProgram(){return _ref4.apply(this,arguments);};}();/**\r\n * 建立存錢計劃\r\n * @param {*} request {\r\n *    progCode, // 方案代碼。（0＝基本計劃、other=活動的計劃）；此欄位不可為空值。\r\n *    imageId, // Title圖片（預設代碼: 0,1~6），若是由用戶上傳的Base64影像資料，則在建立成功後再透過 updateDepositPlan 上傳；此欄位不可為空值。\r\n *    name, // 計劃名稱（最多七個字），若為 progCode=行銷活動方案 則為空值。\r\n *    startDate, // 計劃啟動時間，格式：yyyyMMdd。此欄位不可為空值。\r\n *    endDate, // 計劃結束時間，格式：yyyyMMdd。此欄位不可為空值。實際存入值，會依周期調整，所以不一定是以傳人的值寫入DB。\r\n *    cycleMode, // 存入週期（1.每周、2.每月）；此欄位不可為空值。\r\n *    cycleTiming, // 存入時機；每周：0～6(周日～周六)、每月1~28或月底(31)；此欄位不可為空值。\r\n *    amount, // 每共月存入金額，格式：99999。此欄位不可為空值。\r\n *    bindAccountNo, // 使用的子帳戶，例：04300491000001；若子帳戶為空值，表示建立新子帳戶。\r\n *    currentBalance, // 目前子帳戶的存款餘額。\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n *   planId: 計劃代碼（UUID 型式）。有值表示建立成功；若為 null 表示建立失敗，會傳回錯誤。\r\n *   currentBalance, // 目前子帳戶的存款餘額, 可以用來判斷是否立即轉帳成功。\r\n * }\r\n */export var createDepositPlan=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request){var response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return callAPI('/api/depositPlan/v1/create',request);case 2:response=_context5.sent;return _context5.abrupt(\"return\",response.data);case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function createDepositPlan(_x3){return _ref5.apply(this,arguments);};}();/**\r\n * 執行轉存錢計劃建立。\r\n * @returns {Promise<{\r\n *   result: Boolean,\r\n *   message: String\r\n * }>}\r\n *- result: 驗證結果(true/false)\r\n *- message: 驗證失敗狀況描述。\r\n */export var createConfirm=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var response;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return callAPI('/api/depositPlan/v1/createConfirm');case 2:response=_context6.sent;return _context6.abrupt(\"return\",response.data);case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function createConfirm(){return _ref6.apply(this,arguments);};}();/**\r\n * 更新存錢計劃資訊\r\n * @param request {\r\n *    planId, // 計劃代碼（UUID 型式）\r\n *    name, // 新的計劃名稱（最多七個字）；若為 null，則表示不變更。\r\n *    image, // Title圖片（前端自訂代碼 或 由用戶上傳的Base64影像資料；空字串表示不變更）\r\n *    isMaster, // 表示主要計劃的旗標；若為 null，則表示不變更。\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n * }\r\n */export var updateDepositPlan=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(request){var response;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return callAPI('/api/depositPlan/v1/update',request);case 2:response=_context7.sent;return _context7.abrupt(\"return\",response.data);case 4:case\"end\":return _context7.stop();}}},_callee7);}));return function updateDepositPlan(_x4){return _ref7.apply(this,arguments);};}();/**\r\n * 結束存錢計劃，並將往來記錄以數位存摺模式寄給用戶。\r\n * @param {*} {\r\n *   planId 計劃代碼（UUID 型式）\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n *   email: 存錢計畫、存錢歷程打包成PDF檔(需要加密)的寄送郵箱。\r\n * }\r\n */export var closeDepositPlan=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(planId){var response;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return callAPI('/api/depositPlan/v1/close',planId);case 2:response=_context8.sent;return _context8.abrupt(\"return\",response.data);case 4:case\"end\":return _context8.stop();}}},_callee8);}));return function closeDepositPlan(_x5){return _ref8.apply(this,arguments);};}();/**\r\n * 取得存錢計畫服務條款\r\n * @returns\r\n */export var getDepositPlanTerms=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(){var response;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return new Promise(function(resolve){return resolve({data:decodeURI(mockTerms)});});case 2:response=_context9.sent;return _context9.abrupt(\"return\",response.data);case 4:case\"end\":return _context9.stop();}}},_callee9);}));return function getDepositPlanTerms(){return _ref9.apply(this,arguments);};}();","map":{"version":3,"names":["callAPI","mockTerms","getAccountSummary","acctTypes","response","data","map","acct","acctBranch","branch","acctName","name","acctId","account","acctType","type","acctBalx","balance","ccyCd","currency","getTransactionDetails","request","getDepositPlans","getDepositPlanProgram","createDepositPlan","createConfirm","updateDepositPlan","closeDepositPlan","planId","getDepositPlanTerms","Promise","resolve","decodeURI"],"sources":["C:/Users/allen/git/app2-webview/src/pages/C00600_DepositPlan/api.js"],"sourcesContent":["import { callAPI } from 'utilities/axios';\r\n\r\nimport mockTerms from './terms';\r\n\r\n/**\r\n * 取得存款帳戶卡片所需的資訊\r\n * @param {*} acctType 帳戶類型 M:母帳戶, S:證券戶, F:外幣帳戶, C:子帳戶\r\n * @returns 存款帳戶資訊。\r\n */\r\nexport const getAccountSummary = async (acctTypes) => {\r\n  const response = await callAPI('/api/deposit/v1/getAccountSummary', acctTypes);\r\n  return response.data.map((acct) => ({\r\n    acctBranch: acct.branch, // 分行代碼\r\n    acctName: acct.name, // 帳戶名稱或暱稱\r\n    acctId: acct.account, // 帳號\r\n    acctType: acct.type, // 帳號類別\r\n    acctBalx: acct.balance, // 帳戶餘額\r\n    ccyCd: acct.currency, // 幣別代碼\r\n  }));\r\n};\r\n\r\n/**\r\n * 取得當前所選帳號之交易明細\r\n * @param {*} request {\r\n    accountNo: 帳號, ex: 00100100063106,\r\n    custom: 文字檢索條件, ex: 退款.\r\n    startDate: 交易日期起日, ex: 20200101,\r\n    endDate: 交易日期迄日, ex: 20210731,\r\n    txnType: 摘要代碼: 1:跨轉、2:ATM、3:存款息、4:薪轉、5:付款儲存、6:自動扣繳, 可多筆,\r\n    month: 起始月份，預設為最接近月底的日期為起始索引, ex: 202104,\r\n    startIndex: 指定起始索引,\r\n    direct: 方向性.1:正向(新~舊)、2:反向(舊~新)、0:雙向方向性\r\n  }\r\n * @returns 帳戶往來明細清單\r\n    {\r\n        \"index\": 1,\r\n        \"bizDate\": \"20220425\",\r\n        \"txnDate\": \"20220425\",\r\n        \"txnTime\": 210156,\r\n        \"description\": \"現金\",\r\n        \"memo\": null,\r\n        \"targetMbrId\": null,\r\n        \"targetNickName\": null,\r\n        \"targetBank\": \"000\",\r\n        \"targetAcct\": null,\r\n        \"amount\": 36000,\r\n        \"balance\": 386000,\r\n        \"cdType\": \"d\",\r\n        \"currency\": \"TWD\"\r\n    }\r\n */\r\nexport const getTransactionDetails = async (request) => {\r\n  const response = await callAPI('/api/deposit/v1/getTransactions', request);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 取得目前用戶的存錢計劃清單\r\n * @returns {object}\r\n {\r\n    plans: [{ // 進行中的計劃數量\r\n      planId, // 計劃代碼（UUID 型式），可以用來取得圖片。 直接組合 URL/{planId}.jpg\r\n      progInfo: { // 存錢計劃適用方案(Program)資訊\r\n        code: 代碼，應跟優利的代碼一致。\r\n        type: 類型：0.基本方案, 1.行銷活動方案.\r\n        name: 名稱\r\n        rate: 計息利率，例: 0.6；僅供顯示用，不會拿來計息。\r\n        description: 詳細說明。\r\n      },\r\n      imageId, // Title圖片（預設代碼: 0,1~6），若是由用戶上傳的Base64影像資料，則在建立成功後再透過 updateDepositPlan 上傳\r\n      name, // 計劃名稱（最多七個字），若為 progCode=行銷活動方案 則為方案名稱。\r\n      startDate, // 計劃啟動時間，格式：yyyyMMdd\r\n      endDate, // 計劃結束時間，格式：yyyyMMdd\r\n      cycleMode, // 存入週期（1.每周、2.每月）\r\n      cycleTiming, // 存入時機；每周：0～6(周日～周六)、每月：1~28及月底(31)\r\n      amount, // 每期存入金額，格式：99999。\r\n      period, // 計劃存入期數\r\n      goalAmount: // 依 amount * 期數 計算出的計劃目標存款金額。\r\n      bindAccountNo, // 綁定的子帳戶（帳號、餘額）\r\n      currentBalance, // 目前子帳戶的存款餘額\r\n      isMaster, // 表示呈現在APP首頁的主要計劃，即進存錢計劃功能的預設開啟計劃。\r\n    }, ...],\r\n    subAccounts: [{ // 可用子帳戶清單及是否有餘額，已排除綁定其他用途的子帳戶\r\n      accountNo, // 子帳戶的帳號\r\n      balance, // 帳戶餘額\r\n    }, ...]\r\n    totalSubAccountCount, // 此用戶已擁有的子帳戶數量（不區分用途）\r\n */\r\nexport const getDepositPlans = async () => {\r\n  const response = await callAPI('/api/depositPlan/v1/getAllPlans');\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 取得存錢計劃適用方案(Program)資訊，已停用或不在有效期限內的方案不會列在清單中。\r\n * @returns {object}\r\n * @return [{\r\n *   code: 代碼，應跟優利的代碼一致。\r\n *   type: 類型：0.基本方案, 1.行銷活動方案.\r\n *   name: 名稱\r\n *   rate: 計息利率，例: 0.6；僅供顯示用，不會拿來計息。\r\n *   period: 期數，基本方案時為 0\r\n *   description: 詳細說明。\r\n *   amountRange: {\r\n *      week: { 存入週期（1.每周）時，的上下限金額。例：{ min: 100, max: 50000 }\r\n *        min: 0,\r\n *        max: 0\r\n *      }\r\n *      month: { 存入週期（2.每月）時，的上下限金額。例：{ min: 10000, max: 500000 }\r\n *        min: 0,\r\n *        max: 0\r\n *      }\r\n *   }\r\n * }, ...]\r\n */\r\nexport const getDepositPlanProgram = async () => {\r\n  const response = await callAPI('/api/depositPlan/v1/getPrograms');\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 建立存錢計劃\r\n * @param {*} request {\r\n *    progCode, // 方案代碼。（0＝基本計劃、other=活動的計劃）；此欄位不可為空值。\r\n *    imageId, // Title圖片（預設代碼: 0,1~6），若是由用戶上傳的Base64影像資料，則在建立成功後再透過 updateDepositPlan 上傳；此欄位不可為空值。\r\n *    name, // 計劃名稱（最多七個字），若為 progCode=行銷活動方案 則為空值。\r\n *    startDate, // 計劃啟動時間，格式：yyyyMMdd。此欄位不可為空值。\r\n *    endDate, // 計劃結束時間，格式：yyyyMMdd。此欄位不可為空值。實際存入值，會依周期調整，所以不一定是以傳人的值寫入DB。\r\n *    cycleMode, // 存入週期（1.每周、2.每月）；此欄位不可為空值。\r\n *    cycleTiming, // 存入時機；每周：0～6(周日～周六)、每月1~28或月底(31)；此欄位不可為空值。\r\n *    amount, // 每共月存入金額，格式：99999。此欄位不可為空值。\r\n *    bindAccountNo, // 使用的子帳戶，例：04300491000001；若子帳戶為空值，表示建立新子帳戶。\r\n *    currentBalance, // 目前子帳戶的存款餘額。\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n *   planId: 計劃代碼（UUID 型式）。有值表示建立成功；若為 null 表示建立失敗，會傳回錯誤。\r\n *   currentBalance, // 目前子帳戶的存款餘額, 可以用來判斷是否立即轉帳成功。\r\n * }\r\n */\r\nexport const createDepositPlan = async (request) => {\r\n  // Rule:\r\n  //    1. Max(plans.count) is 3\r\n  //    2. Max(totalSubAccountCount) is 8\r\n  //    3. subAccounts.count must > 0\r\n  // 沒有可用(建)子帳戶時，則提示「*****」\r\n  const response = await callAPI('/api/depositPlan/v1/create', request);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 執行轉存錢計劃建立。\r\n * @returns {Promise<{\r\n *   result: Boolean,\r\n *   message: String\r\n * }>}\r\n *- result: 驗證結果(true/false)\r\n *- message: 驗證失敗狀況描述。\r\n */\r\nexport const createConfirm = async () => {\r\n  const response = await callAPI('/api/depositPlan/v1/createConfirm');\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 更新存錢計劃資訊\r\n * @param request {\r\n *    planId, // 計劃代碼（UUID 型式）\r\n *    name, // 新的計劃名稱（最多七個字）；若為 null，則表示不變更。\r\n *    image, // Title圖片（前端自訂代碼 或 由用戶上傳的Base64影像資料；空字串表示不變更）\r\n *    isMaster, // 表示主要計劃的旗標；若為 null，則表示不變更。\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n * }\r\n */\r\nexport const updateDepositPlan = async (request) => {\r\n  const response = await callAPI('/api/depositPlan/v1/update', request);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 結束存錢計劃，並將往來記錄以數位存摺模式寄給用戶。\r\n * @param {*} {\r\n *   planId 計劃代碼（UUID 型式）\r\n * }\r\n * @returns {\r\n *   {boolean} result: API執行結果。\r\n *   email: 存錢計畫、存錢歷程打包成PDF檔(需要加密)的寄送郵箱。\r\n * }\r\n */\r\nexport const closeDepositPlan = async (planId) => {\r\n  // 有沒有達標，前端可判斷，因為有帳戶餘額及目標金額\r\n  const response = await callAPI('/api/depositPlan/v1/close', planId);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * 取得存錢計畫服務條款\r\n * @returns\r\n */\r\nexport const getDepositPlanTerms = async () => {\r\n  // Assume backend store Terms as escaped HTML...\r\n  const response = await new Promise((resolve) => resolve({ data: decodeURI(mockTerms) }));\r\n  return response.data;\r\n};\r\n"],"mappings":"0PAAA,OAASA,OAAO,KAAQ,iBAAiB,CAEzC,MAAOC,UAAS,KAAM,SAAS,CAE/B;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,kBAAiB,4FAAG,iBAAOC,SAAS,uJACxBH,QAAO,CAAC,mCAAmC,CAAEG,SAAS,CAAC,QAAxEC,QAAQ,+CACPA,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAC,SAACC,IAAI,QAAM,CAClCC,UAAU,CAAED,IAAI,CAACE,MAAM,CAAE;AACzBC,QAAQ,CAAEH,IAAI,CAACI,IAAI,CAAE;AACrBC,MAAM,CAAEL,IAAI,CAACM,OAAO,CAAE;AACtBC,QAAQ,CAAEP,IAAI,CAACQ,IAAI,CAAE;AACrBC,QAAQ,CAAET,IAAI,CAACU,OAAO,CAAE;AACxBC,KAAK,CAAEX,IAAI,CAACY,QAAU;AACxB,CAAC,EAAC,CAAC,wDACJ,kBAVYjB,kBAAiB,4CAU7B,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMkB,sBAAqB,6FAAG,kBAAOC,OAAO,4JAC1BrB,QAAO,CAAC,iCAAiC,CAAEqB,OAAO,CAAC,QAApEjB,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYe,sBAAqB,8CAGjC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,gBAAe,6FAAG,8KACNtB,QAAO,CAAC,iCAAiC,CAAC,QAA3DI,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYiB,gBAAe,2CAG3B,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,sBAAqB,6FAAG,8KACZvB,QAAO,CAAC,iCAAiC,CAAC,QAA3DI,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYkB,sBAAqB,2CAGjC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,kBAAiB,6FAAG,kBAAOH,OAAO,4JAMtBrB,QAAO,CAAC,4BAA4B,CAAEqB,OAAO,CAAC,QAA/DjB,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBARYmB,kBAAiB,8CAQ7B,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,cAAa,6FAAG,8KACJzB,QAAO,CAAC,mCAAmC,CAAC,QAA7DI,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYoB,cAAa,2CAGzB,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,kBAAiB,6FAAG,kBAAOL,OAAO,4JACtBrB,QAAO,CAAC,4BAA4B,CAAEqB,OAAO,CAAC,QAA/DjB,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAHYqB,kBAAiB,8CAG7B,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,iBAAgB,6FAAG,kBAAOC,MAAM,4JAEpB5B,QAAO,CAAC,2BAA2B,CAAE4B,MAAM,CAAC,QAA7DxB,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAJYsB,iBAAgB,8CAI5B,CAED;AACA;AACA;AACA,GACA,MAAO,IAAME,oBAAmB,6FAAG,8KAEV,IAAIC,QAAO,CAAC,SAACC,OAAO,QAAKA,QAAO,CAAC,CAAE1B,IAAI,CAAE2B,SAAS,CAAC/B,SAAS,CAAE,CAAC,CAAC,GAAC,QAAlFG,QAAQ,iDACPA,QAAQ,CAACC,IAAI,0DACrB,kBAJYwB,oBAAmB,2CAI/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}