{"ast":null,"code":"import _classCallCheck from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/createClass.js\";/* eslint-disable class-methods-use-this */import CryptoJS from'crypto-js';var _require=require('buffer'),Buffer=_require.Buffer;var forge=require('node-forge');// const crypto = require('crypto');\nvar CipherUtil=/*#__PURE__*/function(){function CipherUtil(){_classCallCheck(this,CipherUtil);}_createClass(CipherUtil,[{key:\"generateRSA\",value:/**\r\n   * Generate RSA, only for web\r\n   */function generateRSA(){var keyPair=forge.pki.rsa.generateKeyPair({bits:2048,e:0x10001});var privateKeyPem=forge.pki.privateKeyToPem(keyPair.privateKey);var publicKey=forge.pki.setRsaPublicKey(keyPair.privateKey.n,keyPair.privateKey.e);var publicKeyPem=forge.pki.publicKeyToPem(publicKey);return{privateKey:privateKeyPem,publicKey:publicKeyPem.replace(/(\\r\\n\\t|\\r\\n|\\n|\\r\\t)/gm,'').replace('-----BEGIN PUBLIC KEY-----','').replace('-----END PUBLIC KEY-----','')};}/**\r\n   * 產生指定位元長度的隨機 Key 值陣列，並以 Base64 字串傳回。\r\n   * @param {*} bits 隨機 Key 的位元長度。\r\n   * @returns Base64 格式的隨機 Key 值陣列。\r\n   */},{key:\"generateKey\",value:function generateKey(bits){var key=forge.random.getBytesSync(bits/8);return forge.util.encode64(key);}/**\r\n   * Get ENC for JWE\r\n   * @param {*} aesKey\r\n   */},{key:\"getEnc\",value:function getEnc(aesKey){var key=forge.util.decode64(aesKey);var enc=key.substring(16,32);return forge.util.encode64(enc);}/**\r\n   * Get HMAC, only for web for JWE\r\n   * @param {*} aesKey\r\n   */},{key:\"getHMAC\",value:function getHMAC(aesKey){var key=forge.util.decode64(aesKey);var hmac=key.substring(0,16);return forge.util.encode64(hmac);}/**\r\n   * From Message to Base64, only for web\r\n   * @param {*} publicKey\r\n   * @param {*} message\r\n   */},{key:\"encryptRSA\",value:function encryptRSA(publicKey,message){var encrypted=publicKey.encrypt(message,'RSA-OAEP',{md:forge.md.sha256.create(),mgf1:{md:forge.md.sha256.create()}});return forge.util.encode64(encrypted);}/**\r\n   * From Base64 to Message, only for web\r\n   * @param {*} privateKey\r\n   * @param {*} message\r\n   */},{key:\"decryptRSA\",value:function decryptRSA(privateKey,message){var decodeMessage=Buffer.from(message,'base64');var decrypted=privateKey.decrypt(decodeMessage,'RSA-OAEP',{md:forge.md.sha256.create(),mgf1:{md:forge.md.sha256.create()}});return decrypted;}/**\r\n   * From Message to Base64\r\n   * @param {*} enc\r\n   * @param {*} iv\r\n   * @param {*} message\r\n   */},{key:\"encryptAES\",value:function encryptAES(enc,iv,message){var cipher=forge.cipher.createCipher('AES-CBC',forge.util.decode64(enc));cipher.start({iv:forge.util.decode64(iv)});cipher.update(forge.util.createBuffer(message,'utf8'));cipher.finish();var encrypted=cipher.output;return forge.util.encode64(encrypted.bytes());}/**\r\n   * From Base64 to Message\r\n   * @param {*} enc\r\n   * @param {*} iv\r\n   * @param {*} message\r\n   */},{key:\"decryptAES\",value:function decryptAES(enc,iv,message){var decipher=forge.cipher.createDecipher('AES-CBC',forge.util.decode64(enc));decipher.start({iv:forge.util.decode64(iv)});// decipher.update(forge.util.createBuffer(forge.util.decode64(message)));\ndecipher.update(forge.util.createBuffer(Buffer.from(message,'base64')));// eslint-disable-next-line no-unused-vars\nvar result=decipher.finish();return decipher.output.toString();}/**\r\n   * Transfer Private Key String to Buffer, only for web\r\n   * @param {*} privatKeyString\r\n   */},{key:\"getRSAPrivateKeyFromPem\",value:function getRSAPrivateKeyFromPem(privatKeyString){var privatKey=forge.pki.privateKeyFromPem(\"-----BEGIN RSA PRIVATE KEY-----\\n\".concat(privatKeyString,\"-----END RSA PRIVATE KEY-----\\n\"));return privatKey;}/**\r\n   * Transfer Public Key String to Buffer, only for web\r\n   * @param {*} publicKeyString\r\n   */},{key:\"getRSAPublicKeyFromPem\",value:function getRSAPublicKeyFromPem(publicKeyString){// eslint-disable-next-line no-param-reassign\npublicKeyString=\"-----BEGIN PUBLIC KEY-----\\n\".concat(publicKeyString,\"-----END PUBLIC KEY-----\\n\");var publicKey=forge.pki.publicKeyFromPem(publicKeyString);return publicKey;}/**\r\n   *\r\n   * @param {*} aesKey\r\n   * @param {*} message\r\n   */},{key:\"encryptHMAC\",value:function encryptHMAC(aesKey,message){// return crypto.createHmac('sha256', aesKey).update(message).digest('base64');\nvar hmac=CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256,aesKey);return hmac.update(message).finalize().toString(CryptoJS.enc.Base64);}}]);return CipherUtil;}();export default new CipherUtil();","map":{"version":3,"names":["CryptoJS","require","Buffer","forge","CipherUtil","keyPair","pki","rsa","generateKeyPair","bits","e","privateKeyPem","privateKeyToPem","privateKey","publicKey","setRsaPublicKey","n","publicKeyPem","publicKeyToPem","replace","key","random","getBytesSync","util","encode64","aesKey","decode64","enc","substring","hmac","message","encrypted","encrypt","md","sha256","create","mgf1","decodeMessage","from","decrypted","decrypt","iv","cipher","createCipher","start","update","createBuffer","finish","output","bytes","decipher","createDecipher","result","toString","privatKeyString","privatKey","privateKeyFromPem","publicKeyString","publicKeyFromPem","algo","HMAC","SHA256","finalize","Base64"],"sources":["C:/Users/allen/git/app2-webview/src/utilities/CipherUtil.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst { Buffer } = require('buffer');\r\nconst forge = require('node-forge');\r\n// const crypto = require('crypto');\r\n\r\nclass CipherUtil {\r\n  /**\r\n   * Generate RSA, only for web\r\n   */\r\n  generateRSA() {\r\n    const keyPair = forge.pki.rsa.generateKeyPair({ bits: 2048, e: 0x10001 });\r\n    const privateKeyPem = forge.pki.privateKeyToPem(keyPair.privateKey);\r\n    const publicKey = forge.pki.setRsaPublicKey(keyPair.privateKey.n, keyPair.privateKey.e);\r\n    const publicKeyPem = forge.pki.publicKeyToPem(publicKey);\r\n    return {\r\n      privateKey: privateKeyPem,\r\n      publicKey: publicKeyPem.replace(/(\\r\\n\\t|\\r\\n|\\n|\\r\\t)/gm, '').replace('-----BEGIN PUBLIC KEY-----', '').replace('-----END PUBLIC KEY-----', ''),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 產生指定位元長度的隨機 Key 值陣列，並以 Base64 字串傳回。\r\n   * @param {*} bits 隨機 Key 的位元長度。\r\n   * @returns Base64 格式的隨機 Key 值陣列。\r\n   */\r\n  generateKey(bits) {\r\n    const key = forge.random.getBytesSync(bits / 8);\r\n    return forge.util.encode64(key);\r\n  }\r\n\r\n  /**\r\n   * Get ENC for JWE\r\n   * @param {*} aesKey\r\n   */\r\n  getEnc(aesKey) {\r\n    const key = forge.util.decode64(aesKey);\r\n    const enc = key.substring(16, 32);\r\n    return forge.util.encode64(enc);\r\n  }\r\n\r\n  /**\r\n   * Get HMAC, only for web for JWE\r\n   * @param {*} aesKey\r\n   */\r\n  getHMAC(aesKey) {\r\n    const key = forge.util.decode64(aesKey);\r\n    const hmac = key.substring(0, 16);\r\n    return forge.util.encode64(hmac);\r\n  }\r\n\r\n  /**\r\n   * From Message to Base64, only for web\r\n   * @param {*} publicKey\r\n   * @param {*} message\r\n   */\r\n  encryptRSA(publicKey, message) {\r\n    const encrypted = publicKey.encrypt(message, 'RSA-OAEP', {\r\n      md: forge.md.sha256.create(),\r\n      mgf1: {\r\n        md: forge.md.sha256.create(),\r\n      },\r\n    });\r\n\r\n    return forge.util.encode64(encrypted);\r\n  }\r\n\r\n  /**\r\n   * From Base64 to Message, only for web\r\n   * @param {*} privateKey\r\n   * @param {*} message\r\n   */\r\n  decryptRSA(privateKey, message) {\r\n    const decodeMessage = Buffer.from(message, 'base64');\r\n    const decrypted = privateKey.decrypt(decodeMessage, 'RSA-OAEP', {\r\n      md: forge.md.sha256.create(),\r\n      mgf1: {\r\n        md: forge.md.sha256.create(),\r\n      },\r\n    });\r\n\r\n    return decrypted;\r\n  }\r\n\r\n  /**\r\n   * From Message to Base64\r\n   * @param {*} enc\r\n   * @param {*} iv\r\n   * @param {*} message\r\n   */\r\n  encryptAES(enc, iv, message) {\r\n    const cipher = forge.cipher.createCipher('AES-CBC', forge.util.decode64(enc));\r\n    cipher.start({ iv: forge.util.decode64(iv) });\r\n    cipher.update(forge.util.createBuffer(message, 'utf8'));\r\n    cipher.finish();\r\n    const encrypted = cipher.output;\r\n\r\n    return forge.util.encode64(encrypted.bytes());\r\n  }\r\n\r\n  /**\r\n   * From Base64 to Message\r\n   * @param {*} enc\r\n   * @param {*} iv\r\n   * @param {*} message\r\n   */\r\n  decryptAES(enc, iv, message) {\r\n    const decipher = forge.cipher.createDecipher('AES-CBC', forge.util.decode64(enc));\r\n    decipher.start({ iv: forge.util.decode64(iv) });\r\n    // decipher.update(forge.util.createBuffer(forge.util.decode64(message)));\r\n    decipher.update(forge.util.createBuffer(Buffer.from(message, 'base64')));\r\n    // eslint-disable-next-line no-unused-vars\r\n    const result = decipher.finish();\r\n\r\n    return decipher.output.toString();\r\n  }\r\n\r\n  /**\r\n   * Transfer Private Key String to Buffer, only for web\r\n   * @param {*} privatKeyString\r\n   */\r\n  getRSAPrivateKeyFromPem(privatKeyString) {\r\n    const privatKey = forge.pki.privateKeyFromPem(`-----BEGIN RSA PRIVATE KEY-----\\n${privatKeyString}-----END RSA PRIVATE KEY-----\\n`);\r\n\r\n    return privatKey;\r\n  }\r\n\r\n  /**\r\n   * Transfer Public Key String to Buffer, only for web\r\n   * @param {*} publicKeyString\r\n   */\r\n  getRSAPublicKeyFromPem(publicKeyString) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    publicKeyString = `-----BEGIN PUBLIC KEY-----\\n${publicKeyString}-----END PUBLIC KEY-----\\n`;\r\n    const publicKey = forge.pki.publicKeyFromPem(publicKeyString);\r\n\r\n    return publicKey;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} aesKey\r\n   * @param {*} message\r\n   */\r\n  encryptHMAC(aesKey, message) {\r\n    // return crypto.createHmac('sha256', aesKey).update(message).digest('base64');\r\n    const hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, aesKey);\r\n    return hmac.update(message).finalize().toString(CryptoJS.enc.Base64);\r\n  }\r\n}\r\n\r\nexport default new CipherUtil();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}