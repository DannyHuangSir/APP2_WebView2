{"ast":null,"code":"import _objectSpread from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/allen/git/app2-webview/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{callAPI}from'utilities/axios';import{setFreqAccts}from'stores/reducers/CacheReducer';import store from'stores/store';/**\r\n * 查詢用戶自設的常用轉入帳號清單。\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]>} 常用轉入帳號清單。\r\n */export var getFrequentAccount=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _store$getState;var _store$getState$Cache,freqAccts,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_store$getState$Cache=(_store$getState=store.getState())===null||_store$getState===void 0?void 0:_store$getState.CacheReducer,freqAccts=_store$getState$Cache.freqAccts;if(freqAccts){_context.next=7;break;}_context.next=4;return callAPI('/api/transfer/frequentAccount/v1/getAll');case 4:response=_context.sent;freqAccts=response.data;store.dispatch(setFreqAccts(freqAccts));case 7:return _context.abrupt(\"return\",freqAccts);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getFrequentAccount(){return _ref.apply(this,arguments);};}();/**\r\n * 新增常用轉入帳號。\r\n * @param {{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   nickName: '新暱稱；可為空值'\r\n *   email: '新通知EMAIL；可為空值'\r\n *   headshot: '代表圖檔的內容，使用 Base64 格式；若為 null 表示還沒有設定頭像。'\r\n * }} account\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪除指定項目後的清單。\r\n */export var addFrequentAccount=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(account){var _store$getState2;var response,headshotId,_store$getState$Cache2,freqAccts,newAccount;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return callAPI('/api/transfer/frequentAccount/v1/add',account);case 2:response=_context2.sent;headshotId=response.data;// 將新帳號加入快取。\n_store$getState$Cache2=(_store$getState2=store.getState())===null||_store$getState2===void 0?void 0:_store$getState2.CacheReducer,freqAccts=_store$getState$Cache2.freqAccts;newAccount=_objectSpread(_objectSpread({},account),{},{headshot:headshotId,isNew:true});freqAccts.splice(0,0,newAccount);// 插入到第一筆。\nstore.dispatch(setFreqAccts(freqAccts));return _context2.abrupt(\"return\",freqAccts);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function addFrequentAccount(_x){return _ref2.apply(this,arguments);};}();/**\r\n * 更新常用轉入帳號。\r\n * @param {{\r\n *   bankId: 常用轉入帳戶-銀行代碼\r\n *   acctId: 常用轉入帳戶-帳號\r\n *   bankName: '銀行名稱'\r\n *   nickName: 新暱稱；可為空值\r\n *   email: 新通知EMAIL；可為空值\r\n *   headshot: 代表圖檔的內容，使用 Base64 格式；若為 null 表示還沒有設定頭像。\r\n * }} newAccount 要更新的資料\r\n * @param {{\r\n *   orgBankId: '變更前 常用轉入帳戶-銀行代碼，未變更也需要有值。'\r\n *   orgAcctId: '變更前 常用轉入帳戶-帳號，未變更也需要有值。'\r\n * }} condition 要刪除的項目\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪更新後的清單。\r\n */export var updateFrequentAccount=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(newAccount,condition){var _store$getState3;var isChangeAccount,request,response,headshotId,_store$getState$Cache3,freqAccts,index,account;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:isChangeAccount=newAccount.bankId!==condition.orgBankId||newAccount.acctId!==condition.orgAcctId;request=_objectSpread(_objectSpread({},newAccount),condition);delete request.bankName;_context3.next=5;return callAPI('/api/transfer/frequentAccount/v1/update',request);case 5:response=_context3.sent;headshotId=response.data;// 更新常用轉入帳號快取。\n_store$getState$Cache3=(_store$getState3=store.getState())===null||_store$getState3===void 0?void 0:_store$getState3.CacheReducer,freqAccts=_store$getState$Cache3.freqAccts;index=freqAccts.findIndex(function(account){return account.bankId===condition.orgBankId&&account.acctId===condition.orgAcctId;});account=freqAccts[index];if(isChangeAccount)account.bankId=newAccount.bankId;if(isChangeAccount)account.acctId=newAccount.acctId;if(newAccount.nickName)account.nickName=newAccount.nickName;if(newAccount.email)account.email=newAccount.email;if(newAccount.headshot)account.headshot=headshotId;store.dispatch(setFreqAccts(freqAccts));return _context3.abrupt(\"return\",freqAccts);case 17:case\"end\":return _context3.stop();}}},_callee3);}));return function updateFrequentAccount(_x2,_x3){return _ref3.apply(this,arguments);};}();/**\r\n * 刪除常用轉入帳號，傳回刪除指定項目後的清單。\r\n * @param {{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n * }} condition 要刪除的項目\r\n * @returns {[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪除指定項目後的清單。\r\n */export var deleteFrequentAccount=function deleteFrequentAccount(condition){var _store$getState4;// 更新常用轉入帳號快取。\nvar _store$getState$Cache4=(_store$getState4=store.getState())===null||_store$getState4===void 0?void 0:_store$getState4.CacheReducer,freqAccts=_store$getState$Cache4.freqAccts;var index=freqAccts.findIndex(function(account){return account.bankId===condition.bankId&&account.acctId===condition.acctId;});freqAccts.splice(index,1);store.dispatch(setFreqAccts(freqAccts));callAPI('/api/transfer/frequentAccount/v1/delete',condition);return freqAccts;};","map":{"version":3,"names":["callAPI","setFreqAccts","store","getFrequentAccount","getState","CacheReducer","freqAccts","response","data","dispatch","addFrequentAccount","account","headshotId","newAccount","headshot","isNew","splice","updateFrequentAccount","condition","isChangeAccount","bankId","orgBankId","acctId","orgAcctId","request","bankName","index","findIndex","nickName","email","deleteFrequentAccount"],"sources":["C:/Users/allen/git/app2-webview/src/pages/D00500_FrequentContacts/api.js"],"sourcesContent":["import { callAPI } from 'utilities/axios';\r\nimport { setFreqAccts } from 'stores/reducers/CacheReducer';\r\nimport store from 'stores/store';\r\n\r\n/**\r\n * 查詢用戶自設的常用轉入帳號清單。\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]>} 常用轉入帳號清單。\r\n */\r\nexport const getFrequentAccount = async () => {\r\n  let {freqAccts} = store.getState()?.CacheReducer;\r\n  if (!freqAccts) {\r\n    const response = await callAPI('/api/transfer/frequentAccount/v1/getAll');\r\n    freqAccts = response.data;\r\n    store.dispatch(setFreqAccts(freqAccts));\r\n  }\r\n  return freqAccts;\r\n};\r\n\r\n/**\r\n * 新增常用轉入帳號。\r\n * @param {{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   nickName: '新暱稱；可為空值'\r\n *   email: '新通知EMAIL；可為空值'\r\n *   headshot: '代表圖檔的內容，使用 Base64 格式；若為 null 表示還沒有設定頭像。'\r\n * }} account\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪除指定項目後的清單。\r\n */\r\nexport const addFrequentAccount = async (account) => {\r\n  const response = await callAPI('/api/transfer/frequentAccount/v1/add', account);\r\n  const headshotId = response.data;\r\n\r\n  // 將新帳號加入快取。\r\n  const {freqAccts} = store.getState()?.CacheReducer;\r\n  const newAccount = {\r\n    ...account,\r\n    headshot: headshotId,\r\n    isNew: true,\r\n  };\r\n  freqAccts.splice(0, 0, newAccount); // 插入到第一筆。\r\n  store.dispatch(setFreqAccts(freqAccts));\r\n\r\n  return freqAccts;\r\n};\r\n\r\n/**\r\n * 更新常用轉入帳號。\r\n * @param {{\r\n *   bankId: 常用轉入帳戶-銀行代碼\r\n *   acctId: 常用轉入帳戶-帳號\r\n *   bankName: '銀行名稱'\r\n *   nickName: 新暱稱；可為空值\r\n *   email: 新通知EMAIL；可為空值\r\n *   headshot: 代表圖檔的內容，使用 Base64 格式；若為 null 表示還沒有設定頭像。\r\n * }} newAccount 要更新的資料\r\n * @param {{\r\n *   orgBankId: '變更前 常用轉入帳戶-銀行代碼，未變更也需要有值。'\r\n *   orgAcctId: '變更前 常用轉入帳戶-帳號，未變更也需要有值。'\r\n * }} condition 要刪除的項目\r\n * @returns {Promise<[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪更新後的清單。\r\n */\r\nexport const updateFrequentAccount = async (newAccount, condition) => {\r\n  const isChangeAccount = (newAccount.bankId !== condition.orgBankId || newAccount.acctId !== condition.orgAcctId);\r\n  const request = {\r\n    ...newAccount,\r\n    ...condition,\r\n  };\r\n  delete request.bankName;\r\n  const response = await callAPI('/api/transfer/frequentAccount/v1/update', request);\r\n  const headshotId = response.data;\r\n\r\n  // 更新常用轉入帳號快取。\r\n  const {freqAccts} = store.getState()?.CacheReducer;\r\n  const index = freqAccts.findIndex((account) => account.bankId === condition.orgBankId && account.acctId === condition.orgAcctId);\r\n  const account = freqAccts[index];\r\n  if (isChangeAccount) account.bankId = newAccount.bankId;\r\n  if (isChangeAccount) account.acctId = newAccount.acctId;\r\n  if (newAccount.nickName) account.nickName = newAccount.nickName;\r\n  if (newAccount.email) account.email = newAccount.email;\r\n  if (newAccount.headshot) account.headshot = headshotId;\r\n  store.dispatch(setFreqAccts(freqAccts));\r\n\r\n  return freqAccts;\r\n};\r\n\r\n/**\r\n * 刪除常用轉入帳號，傳回刪除指定項目後的清單。\r\n * @param {{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n * }} condition 要刪除的項目\r\n * @returns {[{\r\n *   bankId: '常用轉入帳戶-銀行代碼'\r\n *   acctId: '常用轉入帳戶-帳號'\r\n *   bankName: '銀行名稱'\r\n *   nickName: '暱稱'\r\n *   email: '通知EMAIL'\r\n *   headshot: '代表圖檔的UUID，用來顯示大頭貼；若為 null 表示還沒有設定頭像。'\r\n * }]} 傳回刪除指定項目後的清單。\r\n */\r\nexport const deleteFrequentAccount = (condition) => {\r\n  // 更新常用轉入帳號快取。\r\n  const {freqAccts} = store.getState()?.CacheReducer;\r\n  const index = freqAccts.findIndex((account) => account.bankId === condition.bankId && account.acctId === condition.acctId);\r\n  freqAccts.splice(index, 1);\r\n  store.dispatch(setFreqAccts(freqAccts));\r\n\r\n  callAPI('/api/transfer/frequentAccount/v1/delete', condition);\r\n\r\n  return freqAccts;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}