/* global test, expect */
/* eslint no-multi-spaces: 0 */
/* eslint array-bracket-spacing: 0 */

import { getDurationTuple } from './common';

// 扣款頻率： 1 = 每週    2 = 每月
const testCases = [
// 維持  扣款  設定      設定          計畫          下次          計畫
// 周期, 頻率, 起日,     當日    ,    起始日   ,    扣款日   ,    結束日
  [   3,    2,   15, '2023-06-15', '2023-06-15', '2023-07-15', '2023-09-15'  ], // 月 當日開始 月中
  [   3,    2,   28, '2023-02-28', '2023-02-28', '2023-03-28', '2023-05-28'  ], // 月 當日開始 月底 28號
  [   3,    2,   28, '2023-08-30', '2023-08-30', '2023-09-28', '2023-11-28'  ], // 月 當日開始 月底 30號
  [   3,    2,   28, '2023-08-31', '2023-08-31', '2023-09-28', '2023-11-28'  ], // 月 當日開始 月底 31號
  [  24,    2,   15, '2023-06-15', '2023-06-15', '2023-07-15', '2025-06-15'  ], // 月 當日開始 二年
  [   3,    2,    1, '2023-02-28', '2023-03-01', '2023-04-01', '2023-06-01'  ], // 月 未來開始 月底
  [   3,    2,    2, '2023-06-15', '2023-07-02', '2023-08-02', '2023-10-02'  ], // 月 未來開始 跳月
  [   3,    1,    4, '2023-06-15', '2023-06-15', '2023-06-22', '2023-08-31'  ], // 週 當日開始 月中
  [   3,    1,    2, '2023-02-28', '2023-02-28', '2023-03-07', '2023-05-16'  ], // 週 當日開始 月底 28號
  [   3,    1,    3, '2023-08-30', '2023-08-30', '2023-09-06', '2023-11-15'  ], // 週 當日開始 月底 30號
  [   3,    1,    4, '2023-08-31', '2023-08-31', '2023-09-07', '2023-11-16'  ], // 週 當日開始 月底 31號
  [   3,    2,   28, '2022-12-31', '2022-12-31', '2023-01-28', '2023-03-28'  ], // 月 當日開始 隔年
  [   3,    2,    1, '2022-12-31', '2023-01-01', '2023-02-01', '2023-04-01'  ], // 月 未來開始 隔年
  [   3,    1,    6, '2022-12-31', '2022-12-31', '2023-01-07', '2023-03-18'  ], // 週 當日開始 隔年
  [   3,    1,    0, '2022-12-31', '2023-01-01', '2023-01-08', '2023-03-19'  ], // 週 未來開始 隔年
];

for (const t of testCases) {
  const cycleDuration = t[0];
  const cycleMode = t[1];
  const cycleTiming = t[2];
  const today = new Date(t[3]);
  const begin = new Date(t[4]);
  const next = new Date(t[5]);
  const end = new Date(t[6]);
  test(`${t[3]}設定、${t[4]}開始、${cycleMode === 1 ? '每週' : '每月'}扣款、維持${cycleDuration}個月`, () => {
    expect(getDurationTuple(today, cycleDuration, cycleMode, cycleTiming))
      .toMatchObject({ begin, end, next});
  });
}
